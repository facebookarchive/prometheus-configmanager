// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TemplateClient is an autogenerated mock type for the TemplateClient type
type TemplateClient struct {
	mock.Mock
}

// CreateTemplateFile provides a mock function with given fields: filename, fileText
func (_m *TemplateClient) CreateTemplateFile(filename string, fileText string) error {
	ret := _m.Called(filename, fileText)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, fileText)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTemplateFile provides a mock function with given fields: filename
func (_m *TemplateClient) DeleteTemplateFile(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTemplateFile provides a mock function with given fields: filename, fileText
func (_m *TemplateClient) EditTemplateFile(filename string, fileText string) error {
	ret := _m.Called(filename, fileText)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, fileText)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTemplateFile provides a mock function with given fields: filename
func (_m *TemplateClient) GetTemplateFile(filename string) (string, error) {
	ret := _m.Called(filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Root provides a mock function with given fields:
func (_m *TemplateClient) Root() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
